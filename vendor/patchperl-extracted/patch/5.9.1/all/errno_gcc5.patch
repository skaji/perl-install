--- ext/Errno/Errno_pm.PL
+++ ext/Errno/Errno_pm.PL
@@ -7,12 +7,35 @@ our $VERSION = "1.09_01";
 my %err = ();
 my %wsa = ();
 
+# Symbian cross-compiling environment.
+my $IsSymbian = exists $ENV{SDK} && -d "$ENV{SDK}\\epoc32";
+
+my $IsMSWin32 = $^O eq 'MSWin32' && !$IsSymbian;
+
 unlink "Errno.pm" if -f "Errno.pm";
 open OUT, ">Errno.pm" or die "Cannot open Errno.pm: $!";
 select OUT;
 my $file;
-foreach $file (get_files()) {
-    process_file($file);
+my @files = get_files();
+if ($Config{gccversion} ne '' && $^O eq 'MSWin32') {
+    # MinGW complains "warning: #pragma system_header ignored outside include
+    # file" if the header files are processed individually, so include them
+    # all in .c file and process that instead.
+    open INCS, '>includes.c' or
+	die "Cannot open includes.c";
+    foreach $file (@files) {
+	next if $file eq 'errno.c';
+	next unless -f $file;
+	print INCS qq[#include "$file"\n];
+    }
+    close INCS;
+    process_file('includes.c');
+    unlink 'includes.c';
+}
+else {
+    foreach $file (@files) {
+	process_file($file);
+    }
 }
 write_errno_pm();
 unlink "errno.c" if -f "errno.c";
@@ -27,7 +50,7 @@ sub process_file {
     }
 
     return unless defined $file and -f $file;
-#   warn "Processing $file\n";
+#    warn "Processing $file\n";
 
     local *FH;
     if (($^O eq 'VMS') && ($Config{vms_cc_type} ne 'gnuc')) {
@@ -53,7 +76,7 @@ sub process_file {
             return;
 	}
     }
-
+    
     if ($^O eq 'MacOS') {
 	while(<FH>) {
 	    $err{$1} = $2
@@ -63,12 +86,13 @@ sub process_file {
 	while(<FH>) {
 	    $err{$1} = 1
 		if /^\s*#\s*define\s+(E\w+)\s+/;
-            if ($^O eq 'MSWin32') {
+            if ($IsMSWin32) {
 	        $wsa{$1} = 1
 	    	    if /^\s*#\s*define\s+WSA(E\w+)\s+/;
             }
 	}
     }
+
     close(FH);
 }
 
@@ -130,6 +154,10 @@ sub get_files {
     } elsif ($^O eq 'vos') {
 	# avoid problem where cpp returns non-POSIX pathnames
 	$file{'/system/include_library/errno.h'} = 1;
+    } elsif ($IsSymbian) {
+        my $SDK = $ENV{SDK};
+        $SDK =~ s!\\!/!g;
+	$file{"$SDK/epoc32/include/libc/sys/errno.h"} = 1;
     } else {
 	open(CPPI,"> errno.c") or
 	    die "Cannot open errno.c";
@@ -138,7 +166,7 @@ sub get_files {
 	    print CPPI "#include <nwerrno.h>\n";
 	} else {
 	    print CPPI "#include <errno.h>\n";
-	    if ($^O eq 'MSWin32') {
+	    if ($IsMSWin32) {
 		print CPPI "#define _WINSOCKAPI_\n"; # don't drag in everything
 		print CPPI "#include <winsock.h>\n";
 	    }
@@ -147,7 +175,7 @@ sub get_files {
 	close(CPPI);
 
 	# invoke CPP and read the output
-	if ($^O eq 'MSWin32' || $^O eq 'NetWare') {
+	if ($IsMSWin32 || $^O eq 'NetWare') {
 	    open(CPPO,"$Config{cpprun} $Config{cppflags} errno.c |") or
 		die "Cannot run '$Config{cpprun} $Config{cppflags} errno.c'";
 	} else {
@@ -157,14 +185,14 @@ sub get_files {
 	}
 
 	my $pat;
-	if (($^O eq 'MSWin32' || $^O eq 'NetWare') and $Config{cc} =~ /^bcc/i) {
+	if (($IsMSWin32 || $^O eq 'NetWare') and $Config{cc} =~ /^bcc/i) {
 	    $pat = '^/\*\s+(.+)\s+\d+\s*:\s+\*/';
 	}
 	else {
 	    $pat = '^#\s*(?:line)?\s*\d+\s+"([^"]+)"';
 	}
 	while(<CPPO>) {
-	    if ($^O eq 'os2' or $^O eq 'MSWin32' or $^O eq 'NetWare') {
+	    if ($^O eq 'os2' or $IsMSWin32 or $^O eq 'NetWare') {
 		if (/$pat/o) {
 		   my $f = $1;
 		   $f =~ s,\\\\,/,g;
@@ -198,7 +226,7 @@ sub write_errno_pm {
     else {
 	print CPPI "#include <errno.h>\n";
     }
-    if ($^O eq 'MSWin32') {
+    if ($IsMSWin32) {
 	print CPPI "#include <winsock.h>\n";
 	foreach $err (keys %wsa) {
 	    print CPPI "#ifndef $err\n";
@@ -217,16 +245,31 @@ sub write_errno_pm {
     unless ($^O eq 'MacOS' || $^O eq 'beos') {	# trust what we have / get later
     # invoke CPP and read the output
 
+	my $inhibit_linemarkers = '';
+	if ($Config{gccversion} =~ /\A(\d+)\./ and $1 >= 5) {
+	    # GCC 5.0 interleaves expanded macros with line numbers breaking
+	    # each line into multiple lines. RT#123784
+	    $inhibit_linemarkers = ' -P';
+	}
+
 	if ($^O eq 'VMS') {
-	    my $cpp = "$Config{cppstdin} $Config{cppflags} $Config{cppminus}";
+	    my $cpp = "$Config{cppstdin} $Config{cppflags}" .
+		$inhibit_linemarkers . " $Config{cppminus}";
 	    $cpp =~ s/sys\$input//i;
 	    open(CPPO,"$cpp  errno.c |") or
 		die "Cannot exec $Config{cppstdin}";
-	} elsif ($^O eq 'MSWin32' || $^O eq 'NetWare') {
-	    open(CPPO,"$Config{cpprun} $Config{cppflags} errno.c |") or
-		die "Cannot run '$Config{cpprun} $Config{cppflags} errno.c'";
-	} else {
-	    my $cpp = default_cpp();
+	} elsif ($IsMSWin32 || $^O eq 'NetWare') {
+	    my $cpp = "$Config{cpprun} $Config{cppflags}" .
+		$inhibit_linemarkers;
+	    open(CPPO,"$cpp errno.c |") or
+		die "Cannot run '$cpp errno.c'";
+	} elsif ($IsSymbian) {
+            my $cpp = "gcc -E -I$ENV{SDK}\\epoc32\\include\\libc" .
+		$inhibit_linemarkers ." -";
+	    open(CPPO,"$cpp < errno.c |")
+		or die "Cannot exec $cpp";
+        } else {
+	    my $cpp = default_cpp() . $inhibit_linemarkers;
 	    open(CPPO,"$cpp < errno.c |")
 		or die "Cannot exec $cpp";
 	}
